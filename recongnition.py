# -*- coding: utf-8 -*-
"""Recongnition.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cjrIuP3hTV7dK0BLkAyQpiF3j0RUropZ
"""

from google.colab import drive
drive.mount('/content/drive')
!pip install paddlepaddle paddleocr ultralytics opencv-python

import cv2
from paddleocr import PaddleOCR
from ultralytics import YOLO

# Load YOLO model (use your custom model path)
yolo_model = YOLO('/content/drive/MyDrive/runs/detect/train2/weights/best.pt')

# Load PaddleOCR
ocr = PaddleOCR(use_angle_cls=True, lang='en')  # Initialize with English language

# Function to detect number plate using YOLO
def detect_number_plate(image_path, confidence_threshold=0.25):
    image = cv2.imread(image_path)

    # Run YOLO model with a confidence threshold
    results = yolo_model(image, conf=confidence_threshold)

    # Get bounding boxes of detected objects
    boxes = results[0].boxes.xyxy.cpu().numpy()  # Transfer to CPU and convert to NumPy
    if len(boxes) > 0:
        largest_area = 0
        best_box = None

        # Loop through all detected boxes to find the one with the largest area
        for box in boxes:
            x1, y1, x2, y2 = box
            area = (x2 - x1) * (y2 - y1)
            if area > largest_area:  # Assuming the largest box is the number plate
                largest_area = area
                best_box = box

        if best_box is not None:
            x1, y1, x2, y2 = best_box
            # Crop the detected number plate area
            number_plate_image = image[int(y1):int(y2), int(x1):int(x2)]
            return number_plate_image
    else:
        print("No number plate detected!")
        return None

# Function to extract text from the detected number plate using PaddleOCR
def extract_text_from_plate(number_plate_image):
    if number_plate_image is not None:
        # OCR the cropped number plate image
        result = ocr.ocr(number_plate_image, cls=True)

        # Extract and return the detected text
        extracted_text = ""
        for line in result:
            for word_info in line:
                extracted_text += word_info[1][0] + " "

        return extracted_text.strip()
    else:
        return None

# Main function
def main(image_path):
    # Detect number plate
    number_plate_image = detect_number_plate(image_path)

    # Extract text from the number plate
    extracted_text = extract_text_from_plate(number_plate_image)

    if extracted_text:
        print(f"Extracted Number Plate Text: {extracted_text}")
    else:
        print("Failed to extract text from the number plate!")

# Example usage
if __name__ == "__main__":
    image_path = 'tar.jpg'  # Provide the path to your image
    main(image_path)

